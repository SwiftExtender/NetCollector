/*
 * standard public schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using NetFighter.Converters;

namespace NetFighter.Models
{
    [DataContract]
    public partial class DomainsHosts : IEquatable<DomainsHosts>
    {
        [Key]
        [Required]
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; set; }

        [Required]
        [DataMember(Name="domain_id", EmitDefaultValue=true)]
        public int DomainId { get; set; }

        [Required]
        [DataMember(Name="host_id", EmitDefaultValue=true)]
        public int HostId { get; set; }

        public Domains Domains { get; set; }
        public Hosts Hosts { get; set; }
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DomainsHosts {\n");
            sb.Append("  DomainId: ").Append(DomainId).Append("\n");
            sb.Append("  HostId: ").Append(HostId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DomainsHosts)obj);
        }
        public bool Equals(DomainsHosts other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DomainId == other.DomainId ||
                    
                    DomainId.Equals(other.DomainId)
                ) && 
                (
                    HostId == other.HostId ||
                    
                    HostId.Equals(other.HostId)
                );
        }
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = 41;
                    
                    hashCode = hashCode * 59 + DomainId.GetHashCode();
                    
                    hashCode = hashCode * 59 + HostId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DomainsHosts left, DomainsHosts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DomainsHosts left, DomainsHosts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
