/*
 * standard public schema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 13.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using NetFighter.Converters;

namespace NetFighter.Models
{
    [DataContract]
    public partial class Requests : IEquatable<Requests>
    {
        [Key]
        [Required]
        [DataMember(Name="id", EmitDefaultValue=true)]
        public int Id { get; set; }
        [Required]
        [DataMember(Name="url_id", EmitDefaultValue=true)]
        public int UrlId { get; set; }
        [Required]
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; } = "CURRENT_TIMESTAMP";
        [Required]
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int Status { get; set; }
        [Required]
        [DataMember(Name="response", EmitDefaultValue=false)]
        public string Response { get; set; }
        [DataMember(Name="info", EmitDefaultValue=false)]
        public string Info { get; set; }
        [Required]
        [DataMember(Name="raw_request", EmitDefaultValue=false)]
        public string RawRequest { get; set; }
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Requests {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UrlId: ").Append(UrlId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  RawRequest: ").Append(RawRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Requests)obj);
        }
        public bool Equals(Requests other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    UrlId == other.UrlId ||
                    
                    UrlId.Equals(other.UrlId)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.Equals(other.Method)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Response == other.Response ||
                    Response != null &&
                    Response.Equals(other.Response)
                ) && 
                (
                    Info == other.Info ||
                    Info != null &&
                    Info.Equals(other.Info)
                ) && 
                (
                    RawRequest == other.RawRequest ||
                    RawRequest != null &&
                    RawRequest.Equals(other.RawRequest)
                );
        }
        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = 41;
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + UrlId.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Response != null)
                    hashCode = hashCode * 59 + Response.GetHashCode();
                    if (Info != null)
                    hashCode = hashCode * 59 + Info.GetHashCode();
                    if (RawRequest != null)
                    hashCode = hashCode * 59 + RawRequest.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Requests left, Requests right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Requests left, Requests right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
